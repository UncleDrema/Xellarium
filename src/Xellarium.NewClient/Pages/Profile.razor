@page "/profile/{UserId}"
@using Xellarium.NewClient.Services
@using Xellarium.Shared.DTO
@using Xellarium.NewClient.Components
@inject IApiAccess api
<h3>Профиль</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3" role="alert">
        @errorMessage
    </div>
}
else if (user == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <PageTitle>Профиль @user.Name</PageTitle>
    <div class="profile-card">
        <img src="placeholder-avatar.png" alt="Avatar" class="avatar"/>
        <div class="profile-info">
            <p>Имя: @user.Name</p>
            <p>Роль: @user.Role</p>
            <p>Предупреждения: @user.WarningsCount</p>
        </div>
    </div>
    @if (user.IsBlocked)
    {
        <p style="color:red;">Пользователь заблокирован</p>
    }
    <br/>
    <h3 class="text-center">Мои Правила</h3>
    <div class="relative-container">
        <RuleList Rules="user.Rules" CardType="RuleCardType.Delete"/>
        <NavLink class="btn btn-primary absolute-button" href="/newrule">+</NavLink>
    </div>
    <br/>
    <h3 class="text-center">Мои Коллекции</h3>
    <div class="relative-container">
        <CollectionList Collections="user.Collections" CardType="CollectionCardType.Delete"/>
        <NavLink class="btn btn-primary absolute-button" href="/newcollection">+</NavLink>
    </div>
}

@code {
    private string errorMessage = string.Empty;
    
    [Parameter]
    public string UserId { get; set; }
    
    private UserDTO? user;

    protected override async Task OnInitializedAsync()
    {
        var userId = int.Parse(UserId);
        var (resultCode, profile) = await api.GetUser(userId);
        if (resultCode == ResultCode.Ok)
        {
            user = profile;
            errorMessage = string.Empty;
        }
        else
        {
            errorMessage = "Profile access error";
        }
    }
}