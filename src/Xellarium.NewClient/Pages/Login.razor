@page "/login"
@using System.ComponentModel.DataAnnotations
@using Xellarium.NewClient.Components
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Xellarium.NewClient.Services
@using Xellarium.Shared.DTO
@inject IApiAccess api
@inject ClientAuthenticationService auth
@inject NavigationManager navigationManager
@inject IJSRuntime JsRuntime

<PageTitle>Вход</PageTitle>

<FormContainer>
    @if (!_isTwoFactorDisplayed)
    {
    <h3 class="text-bg-color">Вход</h3>
    <EditForm Model="@_loginModel" OnSubmit="SubmitLogin">
        <DataAnnotationsValidator />
        <ValidationSummary/>
        <FormGroup>
            <label for="username" class="text-secondary">Имя пользователя</label>
            <SfTextBox CssClass="e-form-input" ID="username" @bind-Value="_loginModel.Username"></SfTextBox>
        </FormGroup>
        <FormGroup>
            <label for="password" class="text-secondary">Пароль</label>
            <SfTextBox CssClass="e-form-input" ID="password" @bind-Value="_loginModel.Password"></SfTextBox>
        </FormGroup>
        <FormGroup Centered="@true">
            <SfButton CssClass="e-bigger">Подтвердить</SfButton>
        </FormGroup>
    </EditForm>
    }
    else
    {
    <h4 class="text-bg-color text-center">Войдите в приложение для аутентификации</h4>
    <h5 class="text-bg-color text-center">Введите код в поле ниже</h5>
    <EditForm Model="@_twoFactorModel" OnSubmit="CompleteLogin">
        <DataAnnotationsValidator />
        <ValidationSummary/>
        <FormGroup>
            <label for="code" class="text-secondary">Код подтверждения</label>
            <SfTextBox CssClass="e-form-input" ID="code" @bind-Value="_twoFactorModel.TwoFactorCode"></SfTextBox>
        </FormGroup>
        <FormGroup Centered="@true">
            <SfButton CssClass="e-bigger">Подтвердить</SfButton>
        </FormGroup>
    </EditForm>
    }
</FormContainer>

@code {
    private readonly LoginModel _loginModel = new LoginModel();
    private readonly TwoFactorModel _twoFactorModel = new TwoFactorModel();
    private bool _isTwoFactorDisplayed = false;
    
    public class LoginModel
    {
        [Required]
        public string Username { get; set; }
        [Required]
        public string Password { get; set; }
    }
    
    public class TwoFactorModel
    {
        public string TwoFactorCode { get; set; }
    }

    private async Task SubmitLogin(EditContext context)
    {
        bool isValid = context.Validate();
        if (isValid)
        {
            _isTwoFactorDisplayed = true;
        }
        else
        {
            Console.WriteLine("Invalid form");
        }
    }
    
    private async Task CompleteLogin(EditContext context)
    {
        bool isValid = context.Validate();
        if (isValid)
        {
            var loginResult = await api.Login(new UserLoginDTO
            {
                Username = _loginModel.Username,
                Password = _loginModel.Password,
                TwoFactorCode = _twoFactorModel.TwoFactorCode
            });
            if (loginResult.Result is ResultCode.Ok && loginResult.Response is not null)
            {
                await auth.AuthenticateWithToken(loginResult.Response.Token);
                navigationManager.NavigateTo("/", true);
            }
            else
            {
                Console.WriteLine($"Result code invalid: {loginResult.Result}");
                _isTwoFactorDisplayed = false;
                _twoFactorModel.TwoFactorCode = string.Empty;
                _loginModel.Password = string.Empty;
                
                await JsRuntime.InvokeVoidAsync("alert", "Неправильные данные авторизации!");
            }
        }
        else
        {
            Console.WriteLine("Invalid form");
        }
    }
}