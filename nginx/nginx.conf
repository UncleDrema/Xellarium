worker_processes 1;

events {
    worker_connections 1024;
}

# 1
http {
    include       mime.types;
    default_type  application/octet-stream;
    
    proxy_pass_header Server;
    server_tokens off;
    add_header Server "Xellarium";
    
    sendfile        on;
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=default_cache:10m max_size=2g;
    proxy_cache default_cache;
    proxy_cache_methods GET;
    proxy_cache_min_uses 1;
    proxy_cache_valid any 10m;
    add_header X-Cache-Status $upstream_cache_status;
    
    proxy_cache_use_stale error timeout;
    
    upstream api_get_upstream {
        server api:8080 max_fails=3 fail_timeout=10s weight=2;
        server api2:8080 max_fails=3 fail_timeout=10s weight=1;
        server api3:8080 max_fails=3 fail_timeout=10s weight=1;
    }
    
    server {
        proxy_cache default_cache;
        listen 80;
        server_name Xellarium;
        root /usr/share/nginx/html;
            
        location /admin/ {
            proxy_set_header X-Script-Name /admin;
            proxy_set_header X-Scheme $scheme;
            proxy_set_header Host $host;
            proxy_pass http://pgadmin:80/;
            proxy_redirect off;
        }
        
        # legacy client
        location /legacy/ {
            proxy_set_header X-Scheme $scheme;
            proxy_set_header Host $host;
            proxy_pass http://host.docker.internal:5039/;
            proxy_redirect off;
        }
        
        location /_framework/ {
            proxy_pass http://host.docker.internal:5039/_framework/;
        }
        
        location /api/v1/ {
            proxy_cache off;
            resolver 127.0.0.11 valid=30s;
            
            if ($request_method = GET) {
                    proxy_pass http://api_get_upstream;
                    break;
            }
                
            proxy_pass http://api:8080/api/v1/;
        }
    
        location /api/v2/ {
            proxy_cache off;
            resolver 127.0.0.11 valid=30s;
            
            if ($request_method = GET) {
                proxy_pass http://api_get_upstream;
                break;
            }
            
            proxy_pass http://api:8080/api/v2/;
        }
        
        location /mirror1/ {
            resolver 127.0.0.11 valid=30s;
            rewrite ^/mirror1(/.*)$ $1 break;  # Убираем /mirror1 из пути
            proxy_pass http://nginx-mirror/;  # Проксируем на другой сервер Nginx (указан как mirror_nginx)
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_redirect off;  # Отключаем редиректы, чтобы они не влияли на путь
        }
        
        location = / {
            try_files /index.html =404;
        }
        
        # Настройка для страницы documentation.html
        location = /documentation {
            try_files /documentation.html =404;
        }
        
        location = /documentation/ {
            try_files /documentation.html =404;
        }
        
        location ~ ^/documentation/(.*) {
            try_files /$1 =404;
        }
        
        location / {
            try_files $uri $uri/ =404;
        }
        
        location = /test {
            try_files /index.html =404;
        }
        
        location = /test/ {
            try_files /index.html =404;
        }
        
        location /test/ {
            return 301 /;
        }
        
        location /test {
            return 301 /;
        }
        
        location /status {
            stub_status on;
        }
    }
}
