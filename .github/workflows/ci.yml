name: CI Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    
    services:
      zipkin:
        image: openzipkin/zipkin
        options: --name zipkin
        ports:
          - 9411:9411

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: sudo apt-get update && sudo apt-get install docker-compose -y
        
      - name: Install Allure
        run: |
          sudo apt-get install -y default-jre  # Устанавливаем Java, необходимую для Allure
          sudo mkdir -p /opt/allure  # Создаём директорию для Allure
          curl -sL https://github.com/allure-framework/allure2/releases/download/2.20.0/allure-2.20.0.tgz -o allure.tgz
          sudo tar -xzvf allure.tgz -C /opt/allure
          sudo ln -s /opt/allure/allure-2.20.0/bin/allure /usr/bin/allure

      - name: Build containers
        run: docker-compose -f docker-compose.yml build

      - name: Run unit tests
        run: |
         docker-compose run --rm unit-tests || true
         if grep -q '"status": "broken"' ./allure-results/*.json; then
           echo "Recording failed tests"
           echo "TESTS_STATUS=failed" >> $GITHUB_ENV
         else
           echo "Recording success tests"
           echo "TESTS_STATUS=success" >> $GITHUB_ENV
         fi

      - name: Run integration tests
        run: |
          echo ${{ env.TESTS_STATUS }}
          docker-compose down -v
          docker-compose run --rm -e TESTS_STATUS=${{ env.TESTS_STATUS }} integration-tests || true
          if grep -q '"status": "broken"' ./allure-results/*.json; then
            echo "TESTS_STATUS=failed" >> $GITHUB_ENV
          else
            echo "TESTS_STATUS=success" >> $GITHUB_ENV
          fi
        env:
          TESTS_STATUS: ${{ env.TESTS_STATUS }}

      - name: Run E2E tests
        if: success() || failure()
        run: |
          echo ${{ env.TESTS_STATUS }}
          docker-compose down -v
          docker-compose run --rm -e TESTS_STATUS=${{ env.TESTS_STATUS }} e2e-tests || true
        env:
          TESTS_STATUS: ${{ env.TESTS_STATUS }}

      - name: Print all folders
        run: ls -la .
        
      - name: Print all folders in test
        run: ls -la ./test
        
      - name: Set permissions for allure-results
        run: sudo chmod -R 755 allure-results

      - name: Generate Allure report
        run: |
          allure generate ./allure-results -o ./allure-report

      - name: Upload Allure report as artifact
        uses: actions/upload-artifact@v3
        with:
          name: allure-report
          path: ./allure-report

      - name: Upload Allure results as artifact
        uses: actions/upload-artifact@v3
        with:
          name: allure-results
          path: ./allure-results
          
      - name: Save Zipkin traces
        run: docker cp zipkin:/zipkin-data ./zipkin-data

      - name: Upload Zipkin traces as artifact
        uses: actions/upload-artifact@v3
        with:
          name: zipkin-traces
          path: ./zipkin-data

      - name: Clean up
        if: success() || failure()
        run: docker-compose down -v
